---
alwaysApply: true
---

# üîç **CODE REVIEW RULES**

Expert code reviewer for React, TypeScript, and modern web development.

---

## **üèóÔ∏è ATOMIC DESIGN**

### **Component Classification:**
- **ATOMS**: Button, Input, Label (single responsibility, no business logic)
- **MOLECULES**: FormField, MessageBubble (2-3 atoms, single purpose)
- **ORGANISMS**: ChatInterface, Canvas (complex logic, multiple components)

### **Review Actions:**
1. Verify component placement in correct atomic category
2. Check for missing atomic components
3. Ensure proper separation of concerns
4. Validate reusability

```typescript
// ‚úÖ GOOD: Proper atomic structure
export const Button = ({ variant, children, ...props }) => (
  <button className={getVariantClasses(variant)} {...props}>{children}</button>
);

// ‚ùå BAD: Complex component in atoms
export function ComplexForm() { /* business logic */ }
```

---

## **üì± RESPONSIVE & ACCESSIBILITY**

### **Mobile-First Requirements:**
- Use mobile-first CSS classes: `grid-cols-1 sm:grid-cols-2 lg:grid-cols-3`
- Minimum 44px touch targets: `min-h-[44px] min-w-[44px]`
- Test breakpoints: 320px, 640px, 768px, 1024px+

### **WCAG 2.1 AA Compliance:**
```typescript
// ‚úÖ REQUIRED: ARIA support
<select
  aria-label="Select source connector"
  aria-describedby="source-help"
  aria-required="true"
>
<div id="source-help" className="sr-only">Help text</div>

// ‚úÖ REQUIRED: Keyboard navigation
<div
  onClick={() => setEditing(true)}
  onKeyDown={(e) => e.key === 'Enter' && setEditing(true)}
  tabIndex={0}
  role="button"
/>

// ‚úÖ REQUIRED: Live regions
<div aria-live="polite">
  {loading && <span className="sr-only">Loading...</span>}
</div>
```

---

## **üîí SECURITY & PERFORMANCE**

### **Input Validation:**
```typescript
// ‚úÖ REQUIRED: Validate and sanitize
const validateInput = (key: string, value: string) => {
  if (key.includes('email')) return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
  if (key.includes('url')) return /^https?:\/\/.+/.test(value);
  return value.trim().length > 0;
};

const sanitizeInput = (input: string) => 
  input.replace(/[<>]/g, '').replace(/javascript:/gi, '').trim();
```

### **Performance Optimization:**
```typescript
// ‚úÖ REQUIRED: Memoization
const ExpensiveComponent = React.memo(({ data, onAction }) => {
  const processedData = useMemo(() => data.map(processItem), [data]);
  const handleAction = useCallback((id) => onAction(id), [onAction]);
  return <div>{/* JSX */}</div>;
});

// ‚úÖ REQUIRED: Proper dependencies
useEffect(() => {
  fetchData();
}, [dependency1, dependency2]);
```

---

## **üìè CODE QUALITY**

### **TypeScript Standards:**
```typescript
// ‚úÖ GOOD: Proper typing
interface CanvasProps {
  onSourceChange?: (value: string) => void;
  showControls?: boolean;
  className?: string;
}

// ‚ùå BAD: Any types
export function Canvas(props: any) { }
```

### **ESLint Requirements:**
- Zero errors and warnings
- No unused variables or imports
- Proper React Hook dependencies
- No `any` types unless necessary

---

## **üß™ TESTING**

### **Required Tests:**
```typescript
describe('Button', () => {
  it('renders with variant classes', () => {
    render(<Button variant="primary">Click</Button>);
    expect(screen.getByRole('button')).toHaveClass('btn-primary');
  });

  it('handles keyboard navigation', () => {
    const onClick = jest.fn();
    render(<Button onClick={onClick}>Click</Button>);
    fireEvent.keyDown(screen.getByRole('button'), { key: 'Enter' });
    expect(onClick).toHaveBeenCalled();
  });

  it('meets accessibility requirements', async () => {
    const { container } = render(<Button>Test</Button>);
    expect(await axe(container)).toHaveNoViolations();
  });
});
```

---

## **üìã REVIEW CHECKLIST**

### **üî• Critical (Block PR):**
- [ ] ESLint: 0 errors/warnings
- [ ] Security: Input validation
- [ ] Accessibility: ARIA labels, keyboard nav
- [ ] TypeScript: No `any` types

### **‚ö†Ô∏è High Priority:**
- [ ] Atomic Design: Correct component categories
- [ ] Mobile-First: Responsive CSS
- [ ] Performance: Memoization
- [ ] Testing: Unit tests for new components

### **üìà Medium Priority:**
- [ ] Documentation: Component props
- [ ] Error Handling: Boundaries
- [ ] Code Organization: File structure
- [ ] Consistency: Established patterns

---

## **üéØ QUALITY GATES**

### **Must Pass:**
- Code Quality: 9/10 (Zero ESLint errors)
- Security: 8/10 (Input validation, XSS prevention)
- Accessibility: 8/10 (WCAG 2.1 AA)
- Mobile-First: 8/10 (Responsive, touch targets)

### **Review Process:**
1. Automated: ESLint, TypeScript, Tests
2. Security: Input validation, XSS prevention
3. Accessibility: ARIA, keyboard navigation
4. Performance: Memoization, bundle size
5. Manual: Cross-browser, mobile testing

**Quality is not negotiable. Every line must meet standards before merging.**