---
alwaysApply: true
---

# 🎯 **NEXLA DEVELOPMENT RULES**

*React, TypeScript, and modern web development standards*

---

## **🏗️ ARCHITECTURE**

### **Atomic Design Hierarchy:**
- **Atoms** (`atoms/`): Button, Input, Label - single responsibility, no business logic
- **Molecules** (`molecules/`): FormField, MessageBubble - combine 2-3 atoms
- **Organisms** (`organisms/`): ChatInterface, Canvas - complex business logic

```typescript
// ✅ Atom: Simple, reusable
export const Button = ({ variant = 'primary', size = 'md', ...props }) => (
  <button className={`btn btn-${variant} btn-${size} min-h-[44px] min-w-[44px]`} {...props} />
);

// ✅ Molecule: Combines atoms
export const FormField = ({ label, input, error }) => (
  <div>
    <Label htmlFor={input.id}>{label}</Label>
    <Input {...input} error={error} />
    {error && <div role="alert">{error}</div>}
  </div>
);
```

### **File Structure:**
```
src/
├── components/atoms/     ← Button, Input, Label
├── components/molecules/ ← FormField, MessageBubble  
├── components/organisms/ ← ChatInterface, Canvas
├── hooks/               ← useChat, useCanvas
├── lib/                 ← utils, security, validation
├── store/               ← Zustand stores
├── types/               ← TypeScript interfaces
└── pages/               ← Route components
```

### **Zustand Store Pattern:**
```typescript
interface CanvasStore {
  nodes: FlowNode[];
  selectedNodeId: string | null;
  addNode: (node: FlowNode) => void;
  updateNode: (id: string, updates: Partial<FlowNode>) => void;
  selectNode: (id: string | null) => void;
  selectedNode: FlowNode | null;
}

export const useCanvasStore = create<CanvasStore>()(
  devtools(persist((set, get) => ({
    nodes: [],
    selectedNodeId: null,
    addNode: (node) => set((state) => ({ nodes: [...state.nodes, node] })),
    updateNode: (id, updates) => set((state) => ({
      nodes: state.nodes.map((n) => n.id === id ? { ...n, ...updates } : n)
    })),
    selectNode: (id) => set({ selectedNodeId: id }),
    get selectedNode() {
      return get().nodes.find((n) => n.id === get().selectedNodeId) || null;
    },
  }), { name: 'canvas-store' }))
);
```

---

## **💻 CODE QUALITY**

### **TypeScript Standards:**
```typescript
// ✅ Strict typing - NO 'any'
interface FlowNode {
  id: string;
  type: 'source' | 'transform' | 'destination';
  status: 'pending' | 'partial' | 'complete' | 'error';
  position: { x: number; y: number };
  configuration: Record<string, string | number | boolean>;
}

// ✅ Discriminated unions
type ApiResponse<T> =
  | { success: true; data: T; error?: never }
  | { success: false; data?: never; error: string };

// ✅ Error handling
const handleApiCall = async <T>(apiCall: () => Promise<T>): Promise<ApiResponse<T>> => {
  try {
    const data = await apiCall();
    return { success: true, data };
  } catch (error) {
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
};
```

### **Performance Optimization:**
```typescript
// ✅ Memoization
const ExpensiveComponent = React.memo(({ data, onAction }) => {
  const processedData = useMemo(() => data.map(processItem), [data]);
  const handleAction = useCallback((id: string) => onAction(id), [onAction]);
  return <div>{/* JSX */}</div>;
});

// ✅ Proper dependencies
useEffect(() => {
  fetchData();
}, [dependency1, dependency2]);

// ✅ Debounced inputs
const debouncedSearch = useCallback(debounce((query) => search(query), 300), []);
```

---

## **🎨 UI/UX STANDARDS**

### **Mobile-First Responsive:**
```typescript
// ✅ Mobile-first classes
<div className="
  flex flex-col gap-4 p-4 text-sm
  sm:gap-6 sm:p-6 sm:text-base
  md:grid md:grid-cols-2 md:gap-8
  lg:max-w-6xl lg:mx-auto lg:p-10
">

// ✅ Touch targets 44px minimum
<button className="min-h-[44px] min-w-[44px] flex items-center justify-center">
```

### **Accessibility (WCAG 2.1 AA):**
```typescript
// ✅ ARIA support
<select
  aria-label="Select source connector"
  aria-describedby="source-help"
  aria-required="true"
>
<div id="source-help" className="sr-only">Help text</div>

// ✅ Keyboard navigation
<div
  onClick={() => setEditing(true)}
  onKeyDown={(e) => (e.key === 'Enter' || e.key === ' ') && setEditing(true)}
  tabIndex={0}
  role="button"
/>

// ✅ Live regions
<div aria-live="polite">
  {loading && <span className="sr-only">Loading...</span>}
</div>
```

### **Design System:**
```typescript
// ✅ Color system
const colors = {
  primary: 'bg-violet-600 text-white hover:bg-violet-500',
  secondary: 'bg-gray-600 text-white hover:bg-gray-500',
  success: 'bg-green-600 text-white hover:bg-green-500',
  error: 'bg-red-600 text-white hover:bg-red-500',
};

// ✅ Spacing scale
const spacing = {
  xs: 'gap-1 p-1',    // 4px
  sm: 'gap-2 p-2',    // 8px  
  md: 'gap-4 p-4',    // 16px
  lg: 'gap-6 p-6',    // 24px
  xl: 'gap-8 p-8',    // 32px
};
```

---

## **🔒 SECURITY & DATA FLOW**

### **Input Validation:**
```typescript
// ✅ Validate and sanitize
const validateInput = (key: string, value: string) => {
  if (key.includes('email')) return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value);
  if (key.includes('url')) return /^https?:\/\/.+/.test(value);
  return value.trim().length > 0;
};

const sanitizeInput = (input: string) => 
  input.replace(/[<>]/g, '').replace(/javascript:/gi, '').trim();

// ✅ Credential masking
const displayValue = (key: string, value: string) => {
  const sensitiveKeys = ['password', 'token', 'secret', 'key'];
  return sensitiveKeys.some(k => key.toLowerCase().includes(k)) 
    ? '***'.repeat(Math.min(value.length, 8)) 
    : value;
};
```

### **Smart Field Collection:**
```typescript
// ✅ Collection step interface
interface CollectionStep {
  stepType: 'node-name' | 'node-fields';
  nodeType: 'source' | 'transform' | 'destination';
  question: string;
  currentStepIndex: number;
  totalSteps: number;
}

// ✅ Progressive updates
const updateCanvasProgressive = (stepType: CollectionStep['stepType'], data: any) => {
  if (stepType === 'node-name') {
    canvasStore.setSelectedNode(data.nodeType, data.nodeName);
  } else {
    canvasStore.updateNodeConfiguration(data.nodeType, data.fieldName, data.value);
  }
};
```

---

## **🧪 TESTING & ERROR HANDLING**

### **Component Testing:**
```typescript
describe('Button', () => {
  it('renders with variant classes', () => {
    render(<Button variant="primary">Click</Button>);
    expect(screen.getByRole('button')).toHaveClass('btn-primary');
  });

  it('handles keyboard navigation', () => {
    const onClick = jest.fn();
    render(<Button onClick={onClick}>Click</Button>);
    fireEvent.keyDown(screen.getByRole('button'), { key: 'Enter' });
    expect(onClick).toHaveBeenCalled();
  });

  it('meets accessibility requirements', async () => {
    const { container } = render(<Button>Test</Button>);
    expect(await axe(container)).toHaveNoViolations();
  });
});
```

### **Error Boundaries:**
```typescript
import { ErrorBoundary } from 'react-error-boundary';

const ErrorFallback = ({ error, resetErrorBoundary }) => (
  <div role="alert" className="error-boundary">
    <h2>Something went wrong</h2>
    <pre>{error.message}</pre>
    <button onClick={resetErrorBoundary}>Try again</button>
  </div>
);

<ErrorBoundary FallbackComponent={ErrorFallback} onReset={() => window.location.reload()}>
  <App />
</ErrorBoundary>
```

---

## **🔄 WORKFLOW & QUALITY**

### **Post-Task Protocol:**
```bash
# ✅ Run development server
npm run dev

# ✅ Report server status (✅ running / ❌ errors)
# ✅ Quality report auto-generated on commit
# ✅ Wait for user instructions (no tests/commits unless requested)
```

### **Testing Protocol (When Requested):**
```bash
taskkill /f /im node.exe          # Close servers
cd Nexla && npm run dev           # Fresh server
npm run lint                      # ESLint check
npm run build                     # TypeScript check
npm audit                         # Security check
npm run reports:serve             # Quality dashboard
```

### **Git Standards:**
```bash
feat: add drag and drop to canvas nodes
fix: resolve accessibility keyboard navigation
docs: update Button component documentation
style: improve mobile responsiveness
refactor: extract validation logic
test: add E2E tests for flow creation
```

### **Quality Gates (Must Pass):**
- **ESLint**: 0 errors, 0 warnings
- **TypeScript**: 0 compilation errors, no 'any' types
- **Accessibility**: 100% axe-core compliance
- **Performance**: Lighthouse > 90, bundle < 500KB
- **Security**: No high/critical vulnerabilities
- **Mobile**: Responsive 320px-1024px+

### **Definition of Done:**
- [ ] Functionality implemented and working
- [ ] Code quality passes (ESLint, TypeScript)
- [ ] Accessibility WCAG 2.1 AA compliant
- [ ] Performance targets met
- [ ] Security validation implemented
- [ ] Unit tests >80% coverage
- [ ] Mobile responsive verified
- [ ] Documentation complete

---

## **🎊 SMART COLLECTION RULES**

1. **DUMMY NODE PRIORITY** - Collect node names before fields
2. **CANVAS STATE ANALYSIS** - Analyze missing components first
3. **ONE QUESTION AT A TIME** - Never ask multiple things
4. **PROGRESSIVE UPDATES** - Update canvas after each input
5. **CONTEXT AWARENESS** - Questions specific to current step
6. **FIELD VALIDATION** - Validate format with helpful errors
7. **COMPLETION DETECTION** - Auto-detect when complete

---

## **🎯 FINAL REMINDERS**

### **User Permission Required:**
- Running tests or quality checks
- Git commits and pushes
- Major refactoring
- Installing dependencies

### **Always Remember:**
- **Mobile-first**: 320px screens first
- **Accessibility**: ARIA labels required
- **Performance**: Memoize expensive operations
- **Security**: Validate all inputs
- **TypeScript**: No 'any' types
- **Atomic Design**: Correct component hierarchy

**🎊 USE FOR EVERY CODING SESSION TO ENSURE QUALITY**